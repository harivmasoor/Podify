{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js","webpack://podify/./src/searchBar.js"],"sourcesContent":["// This file contains the code for the web player.\n\nlet currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        console.log(\"Attempting to play\", body.context_uri);\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    // You can have custom messages or actions based on specific errors.\n    if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","// Description: The main JavaScript file for the Podify web app.\n\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n//   if (type === 'artist') {\n//     await getArtistTopTracks(id);\n//   } else if (type === 'show') {\n//     await getShowEpisodes(id);\n//   } else if (type === 'track' || type === 'episode') {\n//     playItem(id, type);\n//   }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n"],"names":["currentAccessToken","updateSeekBarInterval","accessToken","player","spotifySDKReady","Promise","resolve","window","onSpotifyWebPlaybackSDKReady","setupSearch","accessTokenValue","searchInput","document","getElementById","searchResults","timer","addEventListener","e","target","value","style","border","clearTimeout","setTimeout","async","query","searchEndpoint","encodeURIComponent","headers","response","fetch","status","localStorage","getItem","data","json","access_token","setItem","error","console","refreshToken","trackResults","artistResults","episodeResults","showResults","tracks","items","map","item","type","id","name","image","album","images","url","popularity","artists","episodes","shows","push","sort","a","b","results","resultsContainer","innerHTML","filter","result","length","geniusHeader","createElement","textContent","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","displayResults","searchSpotify","container","resultElement","className","dataset","handleResultClick","currentTarget","isPlaying","togglePlay","pause","then","log","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","hash","location","substring","hashParams","URLSearchParams","has","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","itemId","itemType","body","context_uri","method","JSON","stringify","ok","errorBody","Error","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","src","playItem","setupWebPlayer","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","play","connect","href","event","preventDefault","initializeEventListeners"],"sourceRoot":""}