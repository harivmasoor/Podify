{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/searchBar.js","webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js"],"sourcesContent":["let accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';  // Add border\n  } else {\n      searchResults.style.border = 'none';  // Remove border\n  }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);  // Half a second delay to reduce the number of requests\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const results = [];\n    \n    if (data.shows && data.shows.items) {\n      results.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,  // Include the ID\n        name: item.name,\n    })));\n    }\n    \n    if (data.tracks && data.tracks.items) {\n      results.push(...data.tracks.items.map(item => ({\n        type: 'track',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n    if (data.episodes && data.episodes.items) {\n      results.push(...data.episodes.items.map(item => ({\n        type: 'episode',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';  // Clear previous results\n\n  results.forEach(result => {\n      const resultElement = document.createElement('div');\n      resultElement.className = 'resultItem';\n      resultElement.dataset.id = result.id;  // Add this line to store the Spotify ID on the element\n      resultElement.dataset.type = result.type;  // And this one to store the type (track or show)\n      resultElement.innerHTML = `<strong>${result.type}:</strong> ${result.name}`;\n      resultsContainer.appendChild(resultElement);\n  });\n}\n\n\n\n","let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        console.log(\"Attempting to play\", endpoint, body);\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n}\n\nexport function checkWebPlaybackSDKCompatibility() {\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    // You can have custom messages or actions based on specific errors.\n    if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nconst loginButton = document.getElementById('loginButton');  // Reference to the login button\nloginButton.addEventListener('click', () => {\n    window.location.href = 'https://podify-backend.onrender.com/login';\n});\n\nlet accessToken; // Move the declaration of accessToken to a higher scope\n\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        loginButton.style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); // Use the higher scoped accessToken\n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n          setupWebPlayer(accessToken);\n      } else {\n          alert(\"Device not suitable for playback\");\n      }      \n        const searchInput = document.getElementById('searchInput');\n        const searchResults = document.getElementById('searchResults');\n        searchInput.addEventListener('input', () => {\n            if (searchInput.value.length > 0) {\n                searchResults.style.display = 'block';  // Show the searchResults if there's content\n            } else {\n                searchResults.style.display = 'none';   // Hide the searchResults if there's no content\n            }\n        });\n        setupWebPlayer(accessToken);    \n    }\n});\n\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\nvar player;  // Declare the player variable at a scope accessible by all your functions\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);  // Use the higher scoped accessToken\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.connect();\n};\n\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\ndocument.getElementById('searchInput').addEventListener('focus', (event) => {\n    event.preventDefault();\n});\n\ndocument.getElementById('playPause').addEventListener('click', togglePlay);\ndocument.getElementById('rewind').addEventListener('click', rewindTrack);\ndocument.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n\nlet isPlaying = false;  // To track playback state\n\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n        });\n    }\n}\n\nfunction rewindTrack() {\n    player.seek(player.getCurrentState().position - 15000);  // rewinds 15 seconds\n}\n\nfunction fastForwardTrack() {\n    player.seek(player.getCurrentState().position + 15000);  // fast forwards 15 seconds\n}\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\n\n\n"],"names":["accessToken","currentAccessToken","setupWebPlayer","document","getElementById","addEventListener","e","target","classList","contains","async","itemId","itemType","endpoint","headers","body","context_uri","console","log","response","fetch","method","JSON","stringify","ok","errorBody","json","error","Error","statusText","message","includes","alert","handlePlaybackError","playItem","dataset","id","type","loginButton","player","window","location","href","hash","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","access_token","token_type","expires_in","Authorization","then","data","username","display_name","textContent","catch","accessTokenValue","searchInput","searchResults","timer","value","border","clearTimeout","setTimeout","query","searchEndpoint","encodeURIComponent","status","localStorage","getItem","setItem","refreshToken","results","shows","items","push","map","item","name","tracks","episodes","resultsContainer","innerHTML","forEach","result","resultElement","createElement","className","appendChild","displayResults","searchSpotify","setupSearch","Spotify","Player","isSupported","length","onSpotifyWebPlaybackSDKReady","getOAuthToken","callback","addListener","state","isPlaying","paused","connect","event","preventDefault","pause","resume","seek","getCurrentState","position"],"sourceRoot":""}