{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js","webpack://podify/./src/searchBar.js"],"sourcesContent":["\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        const currentImage = document.getElementById('currentImage');\n        currentImage.src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n        currentImage.style.display = 'block';  // Show the image\n    }\n}\nasync function fetchCurrentPlaying(retries = 3) {\n    const endpoint = `https://api.spotify.com/v1/me/player`; \n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    if (retries <= 0) {\n        console.warn(\"Max retries reached. Unable to fetch currently playing track.\");\n        return;\n    }\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            if (text) {\n                try {\n                    const data = JSON.parse(text);\n                    updateCurrentPlaying(data);\n                } catch (e) {\n                    console.error(\"Failed to parse JSON. Response text:\", text);\n                    throw e;\n                }\n            } else {\n                console.warn(\"No track is currently playing or the response is empty. Retrying...\");\n                setTimeout(() => fetchCurrentPlaying(retries - 1), 2000);  // retry after 2 seconds\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n\n        // Set the src. The load event will trigger once the image is loaded.\n        currentImage.src = track.album.images[0].url;\n\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n\n//testsssss\n","// Description: The main JavaScript file for the Podify web app.\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n// import { initializeAudioCapture } from './audioCapture.js';\n\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track//\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = 'Play';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = 'Pause';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\nlet isMuted = false;  // This variable will track if the audio is muted or not\n\nfunction toggleMute() {\n    console.log('Mute button clicked!');\n    if (isMuted) {\n        player.setVolume(0.5).then(() => {\n            console.log('Volume updated to 0.5!');\n            document.getElementById('mute').innerText = \"Mute\";  // Update button text\n        });\n    } else {\n        player.setVolume(0.001).then(() => {\n            console.log('Volume muted!');\n            document.getElementById('mute').innerText = \"Unmute\";  // Update button text\n        });\n    }\n    isMuted = !isMuted;  // Toggle the isMuted variable\n}\n\n// Attach the function to your button\ndocument.getElementById('mute').addEventListener('click', toggleMute);\n\n\n//test\nfunction onSuccessfulLogin() {\n    // Display the current image, Spotify logo, and web player\n    // document.getElementById('currentImage').style.display = 'block';\n    const currentImage = document.getElementById('currentImage');\n    currentImage.addEventListener('load', function() {\n        this.style.display = 'block';\n    });\n    \n    document.getElementById('spotifyLogo').style.display = 'block'; // changed to getElementById\n    document.getElementById('webPlayer').style.display = 'flex';\n    \n    // For elements with class, use querySelector\n    document.querySelector('.playerControls').style.display = 'flex'; \n    document.querySelector('.playerControls button').style.display = 'flex'; \n    \n    document.getElementById('seekBarContainer').style.display = 'flex';\n    document.getElementById('currentTime').style.display = 'block'; // removed '#'\n    document.getElementById('totalTime').style.display = 'block'; // corrected capitalization to match HTML ID\n    document.getElementById('transcriptionBox').style.display = 'block';\n    document.getElementById('mute').style.display = 'flex';\n    document.getElementById('muteContainer').style.display = 'flex';\n    \n    \n    // Removed the line for '.player-controls' as it doesn't match any class in the provided HTML.\n    //test\n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n    document.getElementById('mute').addEventListener('click', toggleMute);\n\n    // initializeAudioCapture();  \n}\n\n//test\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n        onSuccessfulLogin();\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent =  `<svg width=\"50\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"25\" cy=\"25\" r=\"23\" stroke=\"black\" stroke-width=\"2\" fill=\"none\"/>\n                <rect x=\"18\" y=\"15\" width=\"5\" height=\"20\" fill=\"black\"/>\n                <rect x=\"27\" y=\"15\" width=\"5\" height=\"20\" fill=\"black\"/></svg>`;\n        } else {\n            document.getElementById('playPause').textContent =  `<svg width=\"50\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"25\" cy=\"25\" r=\"23\" stroke=\"black\" stroke-width=\"2\" fill=\"none\"/>\n                <path d=\"M 20 15 L 20 35 L 35 25 L 20 15\" fill=\"black\"/></svg>`;\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                // play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Parse the URL's query parameters\n    const params = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = params.get('access_token');\n\n    if (accessToken) {\n        fetchUserProfile(accessToken).then(userProfile => {\n            if (userProfile.product !== 'premium') {\n                alert('Please upgrade to premium to use this app.');\n                window.location.href = 'https://www.spotify.com';\n            } else {\n                // Handle the logic for premium users (like setting up the web player, etc.)\n                setupWebPlayer(accessToken);\n                // Note: Ensure that \"setupWebPlayer\" function exists and is properly defined in your code.\n            }\n        }).catch(error => {\n            console.error(\"Error fetching user profile:\", error);\n            alert('There was an error fetching your Spotify profile.');\n        });\n    }\n});\n\nfunction fetchUserProfile(accessToken) {\n    return new Promise((resolve, reject) => {\n        fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                'Authorization': 'Bearer ' + accessToken\n            }\n        }).then(response => response.json()).then(data => {\n            resolve(data);\n        }).catch(error => {\n            reject(error);\n        });\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Other JavaScript logic if any...\n\n    const evtSource = new EventSource(\"https://podify-backend.onrender.com/transcription-updates\");\n\n    evtSource.onmessage = function(event) {\n        const data = JSON.parse(event.data);\n        const transcriptionBox = document.getElementById('transcriptionBox');\n        \n        // Append the new transcription to the existing content\n        transcriptionBox.value += data + \"\\n\"; // Adding a newline for separation\n        transcriptionBox.scrollTop = transcriptionBox.scrollHeight; // Scroll to the bottom\n    }\n});\n\nconst transcriptionBox = document.getElementById('transcriptionBox');\n\ntranscriptionBox.addEventListener('input', function() {\n    if (transcriptionBox.value.length > 0) {\n        transcriptionBox.style.height = \"25vh\"; // 25% of the viewport height\n    } else {\n        transcriptionBox.style.height = \"initial\";\n    }\n});\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n//testsssssssssssssss","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  searchInput.style.display = 'block';\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n//     if (data.artists && data.artists.items) {\n//   artistResults.push(...data.artists.items.map(item => ({\n//     type: 'artist',\n//     id: item.id,\n//     name: item.name,\n//     image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n//   })));\n// }///zzz\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    // Hide search results dropdown only when a track or episode is chosen\n    const searchResults = document.getElementById('searchResults');\n    searchResults.style.display = 'none';\n    \n    playItem(id, type);\n  }\n}\n\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n//testsssss"],"names":["currentAccessToken","currentSpotifyUri","setupWebPlayer","accessToken","document","getElementById","addEventListener","redirectToSpotify","fetchCurrentPlaying","spotifyURL","split","slice","join","window","open","console","error","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","undefined","i","response","fetch","ok","Error","err","Promise","res","setTimeout","retries","headers","warn","text","data","item","track","uri","currentImage","src","album","images","url","textContent","name","updateCurrentPlaying","JSON","parse","e","updateSeekBarInterval","player","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","json","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","type","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","dataset","id","image","handleResultClick","currentTarget","artistId","topTracksEndpoint","status","tracks","map","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","style","display","itemId","itemType","body","uris","context_uri","log","method","stringify","errorBody","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","playItem","isPlaying","togglePlay","pause","then","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","isMuted","toggleMute","setVolume","innerText","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","push","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","this","querySelector","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","connect","reject","fetchUserProfile","userProfile","product","href","EventSource","onmessage","event","transcriptionBox","scrollTop","scrollHeight","height","preventDefault","initializeEventListeners"],"sourceRoot":""}