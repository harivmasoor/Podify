{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/searchBar.js","webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js"],"sourcesContent":["let accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';  // Add border\n  } else {\n      searchResults.style.border = 'none';  // Remove border\n  }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);  // Half a second delay to reduce the number of requests\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const results = [];\n    \n    if (data.shows && data.shows.items) {\n      results.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,  // Include the ID\n        name: item.name,\n    })));\n    }\n    \n    if (data.tracks && data.tracks.items) {\n      results.push(...data.tracks.items.map(item => ({\n        type: 'track',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n    if (data.episodes && data.episodes.items) {\n      results.push(...data.episodes.items.map(item => ({\n        type: 'episode',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';  // Clear previous results\n\n  results.forEach(result => {\n      const resultElement = document.createElement('div');\n      resultElement.className = 'resultItem';\n      resultElement.dataset.id = result.id;  // Add this line to store the Spotify ID on the element\n      resultElement.dataset.type = result.type;  // And this one to store the type (track or show)\n      resultElement.innerHTML = `<strong>${result.type}:</strong> ${result.name}`;\n      resultsContainer.appendChild(resultElement);\n  });\n}\n\n\n\n","let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n    }\n}\n","import { setupSearch } from './searchBar.js';\nimport { setupWebPlayer } from './webPlayer.js';\n\n// Define your Spotify API Client ID\nconst clientId = '0cd96f761ce9434b9b4278b664d87591';\n\nconst loginButton = document.getElementById('loginButton');  // Reference to the login button\nloginButton.addEventListener('click', () => {\n  window.location.href = 'https://podify-backend.onrender.com/login';\n});\n\nwindow.addEventListener('load', () => {\n  const hash = window.location.hash.substring(1);\n  const hashParams = new URLSearchParams(hash);\n\n  if (hashParams.has('access_token')) {\n    loginButton.style.display = 'none';  // Hide the login button\n\n    const accessToken = hashParams.get('access_token');\n    const tokenType = hashParams.get('token_type');\n    const expiresIn = hashParams.get('expires_in');\n    const searchContainer = document.getElementById('search-container');\n    searchContainer.style.display = 'block';\n\n    console.log({\n      access_token: accessToken,\n      token_type: tokenType,\n      expires_in: expiresIn,\n    });\n\n    getUserProfile(accessToken);\n    setupSearch(accessToken);\n    const searchInput = document.getElementById('searchInput');\n    searchInput.style.display = 'block'; // Show the search input\n    \n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n      if (searchInput.value.length > 0) {\n          searchResults.style.display = 'block';  // Show the searchResults if there's content\n      } else {\n          searchResults.style.display = 'none';   // Hide the searchResults if there's no content\n      }})\n      setupWebPlayer(accessToken);    \n};\n})\n\nfunction getUserProfile(accessToken) {\n  const headers = {\n    Authorization: `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  fetch('https://api.spotify.com/v1/me', { headers: headers })\n    .then(response => response.json())\n    .then(data => {\n      const username = data.display_name;\n      renderUsername(username);\n    })\n    .catch(error => {\n      console.error('Error fetching user profile:', error);\n    });\n}\n\nplayer.addListener('player_state_changed', state => {\n  console.log(state);\n  isPlaying = !state.paused;\n  if (isPlaying) {\n      document.getElementById('playPause').textContent = '⏸️';\n  } else {\n      document.getElementById('playPause').textContent = '▶️';\n  }\n});\n\n\nfunction renderUsername(username) {\n  const usernameElement = document.getElementById('username');\n  usernameElement.textContent = username;\n}\n\ndocument.getElementById('searchInput').addEventListener('focus', (event) => {\n  event.preventDefault();\n});\n\ndocument.getElementById('playPause').addEventListener('click', togglePlay);\ndocument.getElementById('rewind').addEventListener('click', rewindTrack);\ndocument.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n\nlet isPlaying = false;  // To track playback state\n\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            // Update your playPause button's icon to \"play\" here\n            document.getElementById('playPause').textContent = '▶️';\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            // Update your playPause button's icon to \"pause\" here\n            document.getElementById('playPause').textContent = '⏸️';\n        });\n    }\n}\n\nfunction rewindTrack() {\n    player.seek(player.getCurrentState().position - 15000);  // rewinds 15 seconds\n}\n\nfunction fastForwardTrack() {\n    player.seek(player.getCurrentState().position + 15000);  // fast forwards 15 seconds\n}\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\n\n\n"],"names":["accessToken","setupSearch","accessTokenValue","searchInput","document","getElementById","searchResults","timer","addEventListener","e","target","value","style","border","clearTimeout","setTimeout","async","query","searchEndpoint","encodeURIComponent","headers","response","fetch","status","localStorage","getItem","data","json","access_token","setItem","error","console","refreshToken","results","shows","items","push","map","item","type","id","name","tracks","episodes","resultsContainer","innerHTML","forEach","result","resultElement","createElement","className","dataset","appendChild","displayResults","searchSpotify","currentAccessToken","loginButton","window","location","href","hash","substring","hashParams","URLSearchParams","has","display","get","tokenType","expiresIn","log","token_type","expires_in","Authorization","then","username","display_name","textContent","catch","getUserProfile","length","classList","contains","itemId","itemType","body","context_uri","method","JSON","stringify","ok","Error","statusText","playItem","setupWebPlayer","player","addListener","state","isPlaying","paused","event","preventDefault","pause","resume","seek","getCurrentState","position"],"sourceRoot":""}