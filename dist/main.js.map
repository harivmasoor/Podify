{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js","webpack://podify/./src/searchBar.js"],"sourcesContent":["let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n    if (itemType === 'track' || itemType === 'episode') {\n        body = {\n            uris: [`spotify:${itemType}:${itemId}`],\n        };\n    } else {\n        body = {\n            context_uri: `spotify:${itemType}:${itemId}`,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","// Description: The main JavaScript file for the Podify web app.\n\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n"],"names":["currentAccessToken","async","playItem","itemId","itemType","headers","body","uris","context_uri","console","log","response","endpoint","options","maxRetries","arguments","length","undefined","i","fetch","ok","Error","err","error","Promise","res","setTimeout","fetchWithRetry","method","JSON","stringify","errorBody","json","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","document","getElementById","children","find","item","dataset","id","src","image","textContent","name","updateSeekBarInterval","accessToken","player","spotifySDKReady","resolve","window","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","data","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","type","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","addEventListener","handleResultClick","e","currentTarget","artistId","topTracksEndpoint","status","tracks","map","track","album","images","url","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","isPlaying","togglePlay","pause","then","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","push","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","setupWebPlayer","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","play","connect","href","event","preventDefault","initializeEventListeners"],"sourceRoot":""}