{"version":3,"file":"main.js","mappings":"qCAEA,IAAIA,EAAqB,KACrBC,EAAoB,KAEjB,SAASC,EAAeC,GAC3BH,EAAqBG,EAIDC,SAASC,eAAe,eAChCC,iBAAiB,QAASC,GAGtCC,GACJ,CAEA,SAASD,IACL,GAAIN,EAAmB,CACnB,MAAMQ,EAAc,4BAA2BR,EAAkBS,MAAM,KAAKC,MAAM,GAAGC,KAAK,OAC1FC,OAAOC,KAAKL,EAAY,SAC5B,MACIM,QAAQC,MAAM,sCAEtB,CAGAC,eAAeC,EAAeC,EAAUC,GAAyB,IAAhBC,EAAUC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC1D,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAYI,IAC5B,IACI,MAAMC,QAAiBC,MAAMR,EAAUC,GACvC,GAAIM,EAASE,GAAI,OAAOF,EACxB,GAAID,IAAMJ,EAAa,EAAG,MAAM,IAAIQ,MAAM,sBAC9C,CAAE,MAAOC,GACLf,QAAQC,MAAO,WAAUS,EAAI,+BACvB,IAAIM,SAAQC,GAAOC,WAAWD,EAAK,MAC7C,CAER,CAqDAf,eAAeT,IAAiC,IAAb0B,EAAOZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACzC,MACMa,EAAU,CACZ,cAAkB,UAASnC,IAC3B,eAAgB,oBAGpB,GAAIkC,GAAW,EACXnB,QAAQqB,KAAK,sEAIjB,IACI,MAAMV,QAAiBR,EAZT,uCAYkC,CAAEiB,QAASA,IAC3D,GAAIT,EAASE,GAAI,CACb,MAAMS,QAAaX,EAASW,OAC5B,GAAIA,EACA,KAqBhB,SAA8BC,GAC1B,GAAIA,GAAQA,EAAKC,KAAM,CACnB,MAAMC,EAAQF,EAAKC,KACnBtC,EAAoBuC,EAAMC,IAG1BC,aAAaC,IAAMH,EAAMI,MAAMC,OAAO,GAAGC,IAEzC1C,SAASC,eAAe,gBAAgB0C,YAAcP,EAAMQ,IAChE,MACIjC,QAAQqB,KAAK,sCAErB,CA/BoBa,CADaC,KAAKC,MAAMd,GAE5B,CAAE,MAAOe,GAEL,MADArC,QAAQC,MAAM,uCAAwCqB,GAChDe,CACV,MAEArC,QAAQqB,KAAK,uEACbH,YAAW,IAAMzB,EAAoB0B,EAAU,IAAI,IAE3D,KAAO,CACH,MAAMG,QAAaX,EAASW,OAC5BtB,QAAQC,MAAM,kBAAmBqB,EACrC,CACJ,CAAE,MAAOrB,GACLD,QAAQC,MAAM,kCAAmCA,EACrD,CACJ,CAmBA,IAAIqC,EAAkB,IAAItB,SAASuB,IAC/BzC,OAAO0C,6BAA+B,KAClCD,GAAS,CACZ,ICnJDnD,EAAc,KAuBlBc,eAAeuC,IACb,IACE,MAAM9B,QAAiBC,MAAO,mEAAkE8B,aAAaC,QAAQ,oBAC/GpB,QAAaZ,EAASiC,OAC5BxD,EAAcmC,EAAKsB,aACnBH,aAAaI,QAAQ,eAAgB1D,EACvC,CAAE,MAAOa,GACPD,QAAQC,MAAM,0BAA2BA,EAC3C,CACF,CA0FA,SAAS8C,EAAeC,GACtB,MAAMC,EAAmB5D,SAASC,eAAe,iBACjD2D,EAAiBC,UAAY,GAE7B,MAAMC,EAAiBH,EAAQI,QAAOC,GAA0B,YAAhBA,EAAOC,OACjDC,EAAeP,EAAQI,QAAOC,GAA0B,UAAhBA,EAAOC,OAC/CE,EAAgBR,EAAQI,QAAOC,GAA0B,WAAhBA,EAAOC,OAChDG,EAAcT,EAAQI,QAAOC,GAA0B,SAAhBA,EAAOC,OAEtD,GAAIE,EAAchD,OAAS,EAAG,CAC5B,MAAMkD,EAAerE,SAASsE,cAAc,MAC5CD,EAAa1B,YAAc,WAC3BiB,EAAiBW,YAAYF,GAE7BF,EAAcK,SAAQR,GAAUS,EAAwBT,EAAQJ,IAClE,CAEA,GAAIQ,EAAYjD,OAAS,EAAG,CAC1B,MAAMuD,EAAc1E,SAASsE,cAAc,MAC3CI,EAAY/B,YAAc,SAC1BiB,EAAiBW,YAAYG,GAE7BN,EAAYI,SAAQR,GAAUS,EAAwBT,EAAQJ,IAChE,CACE,GAAIE,EAAe3C,OAAS,EAAG,CAC7B,MAAMwD,EAAY3E,SAASsE,cAAc,MACzCK,EAAUhC,YAAc,OACxBiB,EAAiBW,YAAYI,GAE7Bb,EAAeU,SAAQR,GAAUS,EAAwBT,EAAQJ,IACnE,CAEA,GAAIM,EAAa/C,OAAS,EAAG,CAC3B,MAAMyD,EAAe5E,SAASsE,cAAc,MAC5CM,EAAajC,YAAc,UAC3BiB,EAAiBW,YAAYK,GAE7BV,EAAaM,SAAQR,GAAUS,EAAwBT,EAAQJ,IACjE,CACF,CAEA,SAASa,EAAwBT,EAAQa,GACvC,MAAMC,EAAgB9E,SAASsE,cAAc,OAC7CQ,EAAcC,UAAY,aAC1BD,EAAcE,QAAQC,GAAKjB,EAAOiB,GAClCH,EAAcE,QAAQf,KAAOD,EAAOC,KACpCa,EAAcE,QAAQpC,KAAOoB,EAAOpB,KACpCkC,EAAcE,QAAQE,MAAQlB,EAAOkB,MACrCJ,EAAcjB,UAAa,aAAYG,EAAOkB,eAAelB,EAAOpB,WAAWoB,EAAOpB,OACtFkC,EAAc5E,iBAAiB,QAASiF,GACxCN,EAAUN,YAAYO,EACxB,CAGAjE,eAAesE,EAAkBnC,GAC/B,MAAMiB,EAAOjB,EAAEoC,cAAcJ,QAAQf,KAC/BgB,EAAKjC,EAAEoC,cAAcJ,QAAQC,GAEtB,WAAThB,QAWNpD,eAAkCwE,GAChC,MAAMC,EAAqB,sCAAqCD,yBAC1DtD,EAAU,CACd,cAAkB,UAAShC,IAC3B,eAAgB,oBAGlB,IACE,IAAIuB,QAAiBC,MAAM+D,EAAmB,CAAEvD,QAASA,IAEjC,MAApBT,EAASiE,eACLnC,IACN9B,QAAiBC,MAAM+D,EAAmB,CAAEvD,QAASA,KAWvD2B,SARmBpC,EAASiC,QACLiC,OAAOC,KAAIrD,IAAS,CACzC6B,KAAM,QACNgB,GAAI7C,EAAM6C,GACVrC,KAAMR,EAAMQ,KACZsC,MAAO9C,EAAMI,MAAMC,OAAO,GAAGC,QAKjC,CAAE,MAAO9B,GACPD,QAAQC,MAAM,mCAAoCA,EACpD,CACF,CAtCU8E,CAAmBT,GACP,SAAThB,QAwCbpD,eAA+B8E,GAC7B,MAAMC,EAAoB,oCAAmCD,gCACvD5D,EAAU,CACd,cAAkB,UAAShC,IAC3B,eAAgB,oBAGlB,IACE,IAAIuB,QAAiBC,MAAMqE,EAAkB,CAAE7D,QAASA,IAEhC,MAApBT,EAASiE,eACLnC,IACN9B,QAAiBC,MAAMqE,EAAkB,CAAE7D,QAASA,KAWtD2B,SARmBpC,EAASiC,QACNsC,MAAMJ,KAAIK,IAAW,CACzC7B,KAAM,UACNgB,GAAIa,EAAQb,GACZrC,KAAMkD,EAAQlD,KACdsC,MAAOY,EAAQrD,OAAO,GAAGC,QAK7B,CAAE,MAAO9B,GACPD,QAAQC,MAAM,+BAAgCA,EAChD,CACF,CAnEUmF,CAAgBd,GACJ,UAAThB,GAA6B,YAATA,GDjJ1BpD,eAAwBmF,EAAQC,GACnC,MACMlE,EAAU,CACZ,cAAkB,UAASnC,IAC3B,eAAgB,oBAGpB,IAAIsG,EAIa,UAAbD,GAAqC,YAAbA,GACxBpG,EAAqB,WAAUoG,KAAYD,IAC3CE,EAAO,CACHC,KAAM,CAACtG,MAGXA,EAAqB,WAAUoG,KAAYD,IAC3CE,EAAO,CACHE,YAAavG,IAIrB,IACIc,QAAQ0F,IAAI,qBAAsBH,GAClC,MAAM5E,QAAiBR,EAxBT,4CAwBkC,CAC5CwF,OAAQ,MACRvE,QAASA,EACTmE,KAAMpD,KAAKyD,UAAUL,KAGzB,IAAK5E,EAASE,GAAI,CACd,MAAMgF,QAAkBlF,EAASiC,OAEjC,MADA5C,QAAQC,MAAM,iBAAkB4F,GAC1B,IAAI/E,MAAO,kBAAiBwE,MAAa3E,EAASmF,aAC5D,CAEA9F,QAAQ0F,IAAK,gCAA+BJ,cAAqBD,IACrE,CAAE,MAAOpF,GACLD,QAAQC,MAAM,uBAAwBA,GA6E9C,SAA6BA,GACzBD,QAAQC,MAAM,0BAA2BA,GACrCA,EAAM8F,QAAQC,SAAS,uBACvBC,MAAM,yFACAhG,EAAM8F,QAAQC,SAAS,gDAC7BC,MAAM,iDAENA,MAAM,0CAEd,CArFQC,CAAoBjG,EACxB,CAEA,MAAMkG,EAAeC,MAAMC,KAAKhH,SAASC,eAAe,iBAAiBgH,UAAUC,MAAK/E,GAAQA,EAAK6C,QAAQC,KAAOe,IACpH,GAAIc,EAAc,CACd,MAAMxE,EAAetC,SAASC,eAAe,gBAC7CqC,EAAaC,IAAMuE,EAAa9B,QAAQE,MACxClF,SAASC,eAAe,gBAAgB0C,YAAcmE,EAAa9B,QAAQpC,KAC3EN,EAAa6E,MAAMC,QAAU,OACjC,CACJ,CCgGIC,CAASpC,EAAIhB,EAEjB,CC5LA,MAAMqD,EAAqBtH,SAASC,eAAe,gBACnD,IAAIsH,EACAC,EAAc,GAIX,SAASC,IACZH,EAAmBpH,iBAAiB,SAAS,KACzC,QAA6B,IAAlBqH,GAAyD,aAAxBA,EAAcG,MAAsB,CAC5E,MAAMC,EAAc,CAChBC,MAAO,CACHC,kBAAkB,EAClBC,iBAAiB,EACjBC,kBAAkB,EAClBC,QAAS,IAIjBC,UAAUC,aAAaC,aAAaR,GAC/BS,MAAKC,IACFd,EAAgB,IAAIe,cAAcD,EAAQ,CAAEE,SAAU,2BACtDf,EAAc,GAEdD,EAAciB,gBAAkBC,EAChClB,EAAcmB,OAASC,EAEvBpB,EAAcqB,MAAMC,MACpBvB,EAAmB3E,YAAc,gBAAgB,IAEpDmG,OAAMpH,IACHf,QAAQC,MAAM,iCAAkCc,EAAI,GAEhE,KAAmC,cAAxB6F,EAAcG,QACrBH,EAAcwB,OACdzB,EAAmB3E,YAAc,gBACrC,GAER,CAEA,SAAS8F,EAAgBO,GACrBxB,EAAYyB,KAAKD,EAAM9G,MAEnBsF,EAAYrG,OAAS,IAgB7BN,eAAyBqB,GACrB,MAAMgH,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAAS,IAAIC,KAAK,CAACnH,GAAO,CAAE+B,KAAM,4BAElD,IACI,MAAM3C,QAAiBC,MAAM,iDAAkD,CAC3E+E,OAAQ,OACRJ,KAAMgD,IAGV,IAAK5H,EAASE,GACV,MAAM,IAAIC,MAAM,gCAU5B,SAA8BuC,GAC1B,MAAMsF,EAAmBtJ,SAASC,eAAe,oBAC7C+D,GAAUA,EAAO/B,KACjBqH,EAAiBC,MAAQvF,EAAO/B,KAEhCqH,EAAiBC,MAAQ,8BAEjC,CAbQC,OADqBlI,EAASiC,OAElC,CAAE,MAAO3C,GACLD,QAAQC,MAAM,gDAAiDA,EAAM8F,QACzE,CACJ,CAlCQ+C,CAAUjC,EAAY,IACtBA,EAAcA,EAAYjH,OAAO,GAEzC,CAEA,SAASoI,IACa,IAAIU,KAAK7B,EAAa,CAAEvD,KAAM,2BAKhDuD,EAAc,EAClB,CCjDA,IAAIkC,EACA3J,EACA4J,EDkFJ3J,SAASE,iBAAiB,oBAAoB,KAC1CuH,GAAwB,IClF5B,IAAImC,GAAY,EA6BhB,SAASC,IACDD,EACAD,EAAOG,QAAQ1B,MAAK,KAChBzH,QAAQ0F,IAAI,mBACZuD,GAAY,EACZ5J,SAASC,eAAe,aAAa0C,YAAc,KACnDoH,cAAcL,EAAsB,IAGxCC,EAAOK,SAAS5B,MAAK,KACjBzH,QAAQ0F,IAAI,oBACZuD,GAAY,EACZ5J,SAASC,eAAe,aAAa0C,YAAc,KACnD+G,EAAwBO,YAAYC,EAAe,IAAK,GAGpE,CAGA,SAASC,IACLR,EAAOS,kBAAkBhC,MAAKV,IAC1B,GAAIA,EAAO,CACP,MAAM2C,EAAcC,KAAKC,IAAI7C,EAAM8C,SAAW,KAAO,GACrDb,EAAOc,KAAKJ,GAAajC,MAAK,KAC1BzH,QAAQ0F,IAAI,sBAAsB,GAE1C,IAER,CAEA,SAASqE,IACLf,EAAOS,kBAAkBhC,MAAKV,IAC1B,GAAIA,EAAO,CACP,MAAM2C,EAAc3C,EAAM8C,SAAW,KACrCb,EAAOc,KAAKJ,GAAajC,MAAK,KAC1BzH,QAAQ0F,IAAI,6BAA6B,GAEjD,IAER,CAwJA,SAASsE,EAAWC,GAChB,MAAMC,EAAeP,KAAKQ,MAAMF,EAAK,KAE/BG,EAAUF,EAAe,GAC/B,MAAQ,GAFQP,KAAKQ,MAAMD,EAAe,OAErBE,EAAU,GAAK,IAAM,KAAKA,GACnD,CAEA,SAASb,IACLP,EAAOS,kBAAkBhC,MAAKV,IAC1B,GAAIA,EAAO,CACP,MAAMsD,EAAkBtD,EAAM8C,SAC9BxK,SAASC,eAAe,WAAWsJ,MAAQyB,EAC3ChL,SAASC,eAAe,eAAe0C,YAAcgI,EAAWK,EACpE,IAER,CA/GAvK,OAAOP,iBAAiB,QAAQ,KAC5B,MAAM+K,EAAOxK,OAAOyK,SAASD,KAAKE,UAAU,GACtCC,EAAa,IAAIC,gBAAgBJ,GAEvC,GAAIG,EAAWE,IAAI,gBAAiB,CAChCtL,SAASC,eAAe,eAAekH,MAAMC,QAAU,OAEvDrH,EAAcqL,EAAWG,IAAI,gBAC7B,MAAMC,EAAYJ,EAAWG,IAAI,cAC3BE,EAAYL,EAAWG,IAAI,cACTvL,SAASC,eAAe,oBAChCkH,MAAMC,QAAU,QAEhCzG,QAAQ0F,IAAI,CACR7C,aAAczD,EACd2L,WAAYF,EACZG,WAAYF,IAjIpBlK,MAAM,gCAAiC,CAAEQ,QALzB,CACZ6J,cAAgB,UAwID7L,IAvIf,eAAgB,sBAIfqI,MAAK9G,GAAYA,EAASiC,SAC1B6E,MAAKlG,IAUd,IAAwB2J,IATK3J,EAAK4J,aAUN9L,SAASC,eAAe,YAChC0C,YAAckJ,CAVE,IAE3B/C,OAAMlI,IACHD,QAAQC,MAAM,+BAAgCA,EAAM,IFxBzD,SAAqBmL,GAC1BhM,EAAcgM,EAEd,MAAMC,EAAchM,SAASC,eAAe,eACtCgM,EAAgBjM,SAASC,eAAe,iBAE9C,IAAIiM,EADJF,EAAY7E,MAAMC,QAAU,QAG5B4E,EAAY9L,iBAAiB,SAAU8C,IACjCA,EAAEmJ,OAAO5C,MACX0C,EAAc9E,MAAMiF,OAAS,iBAE7BH,EAAc9E,MAAMiF,OAAS,OAE/BC,aAAaH,GACbA,EAAQrK,YAAW,MAiBvBhB,eAA6ByL,GAC3B,MAAMC,EAAkB,uCAAsCC,mBAAmBF,4CAC3EvK,EAAU,CACd,cAAkB,UAAShC,IAC3B,eAAgB,oBAGlB,IACE,IAAIuB,QAAiBC,MAAMgL,EAAgB,CAAExK,QAASA,IAG9B,MAApBT,EAASiE,eACLnC,IACN9B,QAAiBC,MAAMgL,EAAgB,CAAExK,QAASA,KAGpD,MAAMG,QAAaZ,EAASiC,OAC5B,IAAIW,EAAe,GACfC,EAAgB,GAChBL,EAAiB,GACjBM,EAAc,GAGdlC,EAAKsD,QAAUtD,EAAKsD,OAAOK,QAC7B3B,EAAehC,EAAKsD,OAAOK,MAAMJ,KAAItD,IAAQ,CACzC8B,KAAM,QACNgB,GAAI9C,EAAK8C,GACTrC,KAAMT,EAAKS,KACXsC,MAAO/C,EAAKK,MAAMC,OAAO,GAAGC,IAC5B+J,WAAYtK,EAAKsK,gBAKnBvK,EAAKwK,SAAWxK,EAAKwK,QAAQ7G,QAC/B1B,EAAgBjC,EAAKwK,QAAQ7G,MAAMJ,KAAItD,IAAQ,CAC3C8B,KAAM,SACNgB,GAAI9C,EAAK8C,GACTrC,KAAMT,EAAKS,KACXsC,MAAO/C,EAAKM,OAAO,GAAKN,EAAKM,OAAO,GAAGC,IAAM,KAC7C+J,WAAYtK,EAAKsK,gBAInBvK,EAAKyK,UAAYzK,EAAKyK,SAAS9G,QACjC/B,EAAiB5B,EAAKyK,SAAS9G,MAAMJ,KAAItD,IAAQ,CAC7C8B,KAAM,UACNgB,GAAI9C,EAAK8C,GACTrC,KAAMT,EAAKS,KACXsC,MAAO/C,EAAKM,OAAO,GAAGC,SAGxBR,EAAK0K,OAAS1K,EAAK0K,MAAM/G,OAC3BzB,EAAY6E,QAAQ/G,EAAK0K,MAAM/G,MAAMJ,KAAItD,IAAQ,CAC/C8B,KAAM,OACNgB,GAAI9C,EAAK8C,GACTrC,KAAMT,EAAKS,KACXsC,MAAO/C,EAAKM,OAAO,IAAIC,KAAO,QAG9BR,EAAKwK,SAAWxK,EAAKwK,QAAQ7G,OACnC1B,EAAc8E,QAAQ/G,EAAKwK,QAAQ7G,MAAMJ,KAAItD,IAAQ,CACnD8B,KAAM,SACNgB,GAAI9C,EAAK8C,GACTrC,KAAMT,EAAKS,KACXsC,MAAO/C,EAAKM,OAAO,IAAIC,KAAO,QAM9BwB,EAAa2I,MAAK,CAACC,EAAGC,IAAMA,EAAEN,WAAaK,EAAEL,aAC7CtI,EAAc0I,MAAK,CAACC,EAAGC,IAAMA,EAAEN,WAAaK,EAAEL,aAG9C,MAAM9I,EAAU,IAAIS,KAAeF,KAAiBC,KAAkBL,GAKtE,OAFAJ,EAAeC,GAERA,CACT,CAAE,MAAO/C,GAEP,OADAD,QAAQC,MAAM,2BAA4BA,GACnC,EACT,CACF,CArGMoM,CAAchK,EAAEmJ,OAAO5C,MAAM,GAC5B,IAAI,GAEX,CEmIQ0D,CAAYlN,GHFbc,iBAEH,aADMoC,EACCxC,OAAOyM,SAASC,QAAQC,gBAAiB,CACpD,CGAYC,GACAvN,EAAeC,GAEf6G,MAAM,oCA3EO5G,SAASC,eAAe,gBAChCC,iBAAiB,QAAQ,WAClCoN,KAAKnG,MAAMC,QAAU,OACzB,IAEApH,SAASC,eAAe,eAAekH,MAAMC,QAAU,QACvDpH,SAASC,eAAe,aAAakH,MAAMC,QAAU,OAGrDpH,SAASuN,cAAc,mBAAmBpG,MAAMC,QAAU,OAC1DpH,SAASuN,cAAc,0BAA0BpG,MAAMC,QAAU,OAEjEpH,SAASC,eAAe,oBAAoBkH,MAAMC,QAAU,OAC5DpH,SAASC,eAAe,eAAekH,MAAMC,QAAU,QACvDpH,SAASC,eAAe,aAAakH,MAAMC,QAAU,OAgErD,KAGJ3G,OAAO0C,6BAA+B,KAClCwG,EAAS,IAAIuD,QAAQC,OAAO,CACxBvK,KAAM,uBACN4K,cAAeC,IACXA,EAAS1N,EAAY,IAI7B4J,EAAO+D,YAAY,wBAAwBhG,IAEvC,GADA/G,QAAQ0F,IAAIqB,GACRA,EAAO,CACP,MAAMiG,EAAgBjG,EAAMkG,aAAaC,cAAcC,YACjD9C,EAAkBtD,EAAM8C,SAE9BxK,SAASC,eAAe,WAAWsK,IAAMoD,EACzC3N,SAASC,eAAe,WAAWsJ,MAAQyB,EAG3ChL,SAASC,eAAe,eAAe0C,YAAcgI,EAAWK,GAChEhL,SAASC,eAAe,aAAa0C,YAAcgI,EAAWgD,EAClE,CACA/D,GAAalC,EAAMqG,OAEf/N,SAASC,eAAe,aAAa0C,YADrCiH,EACmD,KAEA,IACvD,IAGJD,EAAO+D,YAAY,SAASM,IAAmB,IAAlB,UAAEC,GAAWD,EACtCrN,QAAQ0F,IAAI,uBAAwB4H,GAEpCvE,EAAwBO,YAAYC,EAAe,KAQnD3I,MAAM,uCAAwC,CAC1C+E,OAAQ,MACRvE,QAPY,CACZ,cAAkB,UAAShC,IAC3B,eAAgB,oBAMhBmG,KAAMpD,KAAKyD,UAAU,CACjB2H,WAAY,CAACD,OAGlB7F,MAAK9G,IACCA,EAASE,IACVb,QAAQC,MAAM,+BAAgCU,EAASmF,WAC3D,GACF,IAGNkD,EAAOwE,SAAS,EAGpBnO,SAASC,eAAe,aAAakH,MAAMC,QAAU,QAErDpH,SAASC,eAAe,WAAWC,iBAAiB,SAAU8C,IAC1D,MAAMqH,EAAcrH,EAAEmJ,OAAO5C,MAC7BI,EAAOc,KAAKJ,GAAajC,MAAK,KAC1BzH,QAAQ0F,IAAK,YAAWgE,OAAiB,GAC3C,IAoBNrK,SAASC,eAAe,eAAe0C,YAAcgI,EA5O/B,GA6OtB3K,SAASC,eAAe,aAAa0C,YAAcgI,EA5O/B,GA6OpB3K,SAASE,iBAAiB,oBAAoB,WAE1C,MACMH,EADS,IAAIsL,gBAAgB5K,OAAOyK,SAASD,KAAKE,UAAU,IACvCI,IAAI,gBAE3BxL,GAiBR,SAA0BA,GACtB,OAAO,IAAI4B,SAAQ,CAACuB,EAASkL,KACzB7M,MAAM,gCAAiC,CACnCQ,QAAS,CACL,cAAiB,UAAYhC,KAElCqI,MAAK9G,GAAYA,EAASiC,SAAQ6E,MAAKlG,IACtCgB,EAAQhB,EAAK,IACd4G,OAAMlI,IACLwN,EAAOxN,EAAM,GACf,GAEV,CA5BQyN,CAAiBtO,GAAaqI,MAAKkG,IACH,YAAxBA,EAAYC,SACZ3H,MAAM,8CACNnG,OAAOyK,SAASsD,KAAO,2BAGvB1O,EAAeC,EAEnB,IACD+I,OAAMlI,IACLD,QAAQC,MAAM,+BAAgCA,GAC9CgG,MAAM,oDAAoD,GAGtE,IArKA,WAEwB5G,SAASC,eAAe,eAChCC,iBAAiB,SAAS,KAClCO,OAAOyK,SAASsD,KAAO,2CAA2C,IAItE,MAAMxC,EAAchM,SAASC,eAAe,eACtCgM,EAAgBjM,SAASC,eAAe,iBAC9C+L,EAAY9L,iBAAiB,SAAS,KAC9B8L,EAAYzC,MAAMpI,OAAS,EAC3B8K,EAAc9E,MAAMC,QAAU,QAE9B6E,EAAc9E,MAAMC,QAAU,MAClC,IAGJ4E,EAAY9L,iBAAiB,SAAU8I,IACnCA,EAAMyF,gBAAgB,IAI1BzO,SAASC,eAAe,aAAaC,iBAAiB,QAAS2J,GAC/D7J,SAASC,eAAe,UAAUC,iBAAiB,QAASiK,GAC5DnK,SAASC,eAAe,eAAeC,iBAAiB,QAASwK,GACjEjD,GACJ,CA0JAiH,E","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/searchBar.js","webpack://podify/./src/audioCapture.js","webpack://podify/./src/index.js"],"sourcesContent":["\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        const currentImage = document.getElementById('currentImage');\n        currentImage.src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n        currentImage.style.display = 'block';  // Show the image\n    }\n}\nasync function fetchCurrentPlaying(retries = 3) {\n    const endpoint = `https://api.spotify.com/v1/me/player`; \n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    if (retries <= 0) {\n        console.warn(\"Max retries reached. Unable to fetch currently playing track.\");\n        return;\n    }\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            if (text) {\n                try {\n                    const data = JSON.parse(text);\n                    updateCurrentPlaying(data);\n                } catch (e) {\n                    console.error(\"Failed to parse JSON. Response text:\", text);\n                    throw e;\n                }\n            } else {\n                console.warn(\"No track is currently playing or the response is empty. Retrying...\");\n                setTimeout(() => fetchCurrentPlaying(retries - 1), 2000);  // retry after 2 seconds\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n\n        // Set the src. The load event will trigger once the image is loaded.\n        currentImage.src = track.album.images[0].url;\n\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  searchInput.style.display = 'block';\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n","const captureAudioButton = document.getElementById('captureAudio');\nlet mediaRecorder;\nlet audioChunks = [];\nconst chunkDuration = 5000; // 5 seconds for this example. Adjust as needed.\nconst overlapDuration = 250; // 0.25 seconds overlap.\n\nexport function initializeAudioCapture() {\n    captureAudioButton.addEventListener('click', () => {\n        if (typeof mediaRecorder === 'undefined' || mediaRecorder.state === 'inactive') {\n            const constraints = {\n                audio: {\n                    echoCancellation: false,\n                    autoGainControl: false,\n                    noiseSuppression: false,\n                    latency: 0\n                }\n            };\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm;codecs=opus' });\n                    audioChunks = [];\n\n                    mediaRecorder.ondataavailable = onDataAvailable;\n                    mediaRecorder.onstop = onRecordingStop;\n\n                    mediaRecorder.start(chunkDuration - overlapDuration);\n                    captureAudioButton.textContent = \"Stop Recording\";\n                })\n                .catch(err => {\n                    console.error('Error accessing the microphone', err);\n                });\n        } else if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n            captureAudioButton.textContent = \"Capture Sound\";\n        }\n    });\n}\n\nfunction onDataAvailable(event) {\n    audioChunks.push(event.data);\n\n    if (audioChunks.length > 1) {\n        sendToAPI(audioChunks[0]); // Send the oldest chunk.\n        audioChunks = audioChunks.slice(-1); // Keep only the latest chunk.\n    }\n}\n\nfunction onRecordingStop() {\n    const audioBlob = new Blob(audioChunks, { type: 'audio/webm;codecs=opus' });\n\n    // TODO: Send the audioBlob to Whisper API for transcription\n\n    // Clear the audioChunks array for the next session\n    audioChunks = [];\n}\n\n// Placeholder function to simulate sending data to the API\nasync function sendToAPI(data) {\n    const formData = new FormData();\n    formData.append('audio', new Blob([data], { type: 'audio/webm;codecs=opus' }));\n\n    try {\n        const response = await fetch('https://podify-backend.onrender.com/transcribe', {\n            method: 'POST',\n            body: formData\n        });\n\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n\n        const result = await response.json();\n        displayTranscription(result); // Display the transcribed result on the webpage\n    } catch (error) {\n        console.error('There was a problem with the fetch operation:', error.message);\n    }\n}\n\nfunction displayTranscription(result) {\n    const transcriptionBox = document.getElementById('transcriptionBox');\n    if (result && result.text) {\n        transcriptionBox.value = result.text;\n    } else {\n        transcriptionBox.value = \"Failed to get transcription.\";\n    }\n}\n\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    initializeAudioCapture();\n});\n\n\n// // audioCapture.js\n\n// const captureAudioButton = document.getElementById('captureAudio');\n// let mediaRecorder;\n// let audioChunks = [];\n\n// function initializeAudioCapture() {\n//     captureAudioButton.addEventListener('click', () => {\n//         if (typeof mediaRecorder === 'undefined' || mediaRecorder.state === 'inactive') {\n//             const constraints = {\n//                 audio: {\n//                     echoCancellation: false,\n//                     autoGainControl: false,\n//                     noiseSuppression: false,\n//                     latency: 0\n//                 }\n//             };\n\n//             navigator.mediaDevices.getUserMedia(constraints)\n//                 .then(stream => {\n//                     mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm;codecs=opus' });\n//                     audioChunks = [];\n\n//                     mediaRecorder.ondataavailable = event => {\n//                         audioChunks.push(event.data);\n//                     };\n\n//                     mediaRecorder.onstop = () => {\n//                         const audioBlob = new Blob(audioChunks, { type: 'audio/webm;codecs=opus' });\n//                         const audioUrl = URL.createObjectURL(audioBlob);\n//                         const audio = new Audio(audioUrl);\n//                         audio.play();\n//                         downloadAudio(audioUrl);\n//                     };\n\n//                     mediaRecorder.start();\n//                     captureAudioButton.textContent = \"Stop Recording\";\n//                 })\n//                 .catch(err => {\n//                     console.error('Error accessing the microphone', err);\n//                 });\n//         } else if (mediaRecorder.state === 'recording') {\n//             mediaRecorder.stop();\n//             captureAudioButton.textContent = \"Capture Sound\";\n//         }\n//     });\n// }\n\n// function downloadAudio(url) {\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = 'recorded-audio.webm';\n//     a.click();\n// }\n\n// // Initialize on page load\n// document.addEventListener('DOMContentLoaded', () => {\n//     initializeAudioCapture();\n// });\n\n//test\n","// Description: The main JavaScript file for the Podify web app.\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\nimport { initializeAudioCapture } from './audioCapture.js';\n\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction onSuccessfulLogin() {\n    // Display the current image, Spotify logo, and web player\n    // document.getElementById('currentImage').style.display = 'block';\n    const currentImage = document.getElementById('currentImage');\n    currentImage.addEventListener('load', function() {\n        this.style.display = 'block';\n    });\n    \n    document.getElementById('spotifyLogo').style.display = 'block'; // changed to getElementById\n    document.getElementById('webPlayer').style.display = 'flex';\n    \n    // For elements with class, use querySelector\n    document.querySelector('.playerControls').style.display = 'flex'; \n    document.querySelector('.playerControls button').style.display = 'flex'; \n    \n    document.getElementById('seekBarContainer').style.display = 'flex';\n    document.getElementById('currentTime').style.display = 'block'; // removed '#'\n    document.getElementById('totalTime').style.display = 'block'; // corrected capitalization to match HTML ID\n    \n    // Removed the line for '.player-controls' as it doesn't match any class in the provided HTML.\n    \n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n    initializeAudioCapture();  \n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n        onSuccessfulLogin();\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                // play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Parse the URL's query parameters\n    const params = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = params.get('access_token');\n\n    if (accessToken) {\n        fetchUserProfile(accessToken).then(userProfile => {\n            if (userProfile.product !== 'premium') {\n                alert('Please upgrade to premium to use this app.');\n                window.location.href = 'https://www.spotify.com';\n            } else {\n                // Handle the logic for premium users (like setting up the web player, etc.)\n                setupWebPlayer(accessToken);\n                // Note: Ensure that \"setupWebPlayer\" function exists and is properly defined in your code.\n            }\n        }).catch(error => {\n            console.error(\"Error fetching user profile:\", error);\n            alert('There was an error fetching your Spotify profile.');\n        });\n    }\n});\n\nfunction fetchUserProfile(accessToken) {\n    return new Promise((resolve, reject) => {\n        fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                'Authorization': 'Bearer ' + accessToken\n            }\n        }).then(response => response.json()).then(data => {\n            resolve(data);\n        }).catch(error => {\n            reject(error);\n        });\n    });\n}\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["currentAccessToken","currentSpotifyUri","setupWebPlayer","accessToken","document","getElementById","addEventListener","redirectToSpotify","fetchCurrentPlaying","spotifyURL","split","slice","join","window","open","console","error","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","undefined","i","response","fetch","ok","Error","err","Promise","res","setTimeout","retries","headers","warn","text","data","item","track","uri","currentImage","src","album","images","url","textContent","name","updateCurrentPlaying","JSON","parse","e","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","json","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","type","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","dataset","id","image","handleResultClick","currentTarget","artistId","topTracksEndpoint","status","tracks","map","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","itemId","itemType","body","uris","context_uri","log","method","stringify","errorBody","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","style","display","playItem","captureAudioButton","mediaRecorder","audioChunks","initializeAudioCapture","state","constraints","audio","echoCancellation","autoGainControl","noiseSuppression","latency","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","mimeType","ondataavailable","onDataAvailable","onstop","onRecordingStop","start","chunkDuration","catch","stop","event","push","formData","FormData","append","Blob","transcriptionBox","value","displayTranscription","sendToAPI","updateSeekBarInterval","player","isPlaying","togglePlay","pause","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","hash","location","substring","hashParams","URLSearchParams","has","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","this","querySelector","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","connect","reject","fetchUserProfile","userProfile","product","href","preventDefault","initializeEventListeners"],"sourceRoot":""}