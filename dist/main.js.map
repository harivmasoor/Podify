{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/searchBar.js","webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js"],"sourcesContent":["let accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    \n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  }\n}\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n","let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        console.log(\"Attempting to play\", body.context_uri);\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    // You can have custom messages or actions based on specific errors.\n    if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n        });\n    }\n}\n\nfunction rewindTrack() {\n    player.seek(player.getCurrentState().position - 15000);  // rewinds 15 seconds\n}\n\nfunction fastForwardTrack() {\n    player.seek(player.getCurrentState().position + 15000);  // fast forwards 15 seconds\n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["accessToken","async","refreshToken","response","fetch","localStorage","getItem","data","json","access_token","setItem","error","console","displayResults","results","resultsContainer","document","getElementById","innerHTML","episodeResults","filter","result","type","trackResults","length","podHeader","createElement","textContent","appendChild","forEach","appendResultToContainer","bangerHeader","container","resultElement","className","dataset","id","name","image","addEventListener","handleResultClick","e","currentTarget","artistId","topTracksEndpoint","headers","status","tracks","map","track","album","images","url","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","currentAccessToken","player","spotifySDKReady","Promise","resolve","window","onSpotifyWebPlaybackSDKReady","isPlaying","togglePlay","pause","then","log","resume","rewindTrack","seek","getCurrentState","position","fastForwardTrack","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","value","border","clearTimeout","setTimeout","query","searchEndpoint","encodeURIComponent","artistResults","item","popularity","artists","episodes","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","itemId","itemType","body","context_uri","method","JSON","stringify","ok","errorBody","Error","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","src","playItem","setupWebPlayer","getOAuthToken","callback","addListener","state","paused","_ref","device_id","device_ids","play","connect","href","event","preventDefault","initializeEventListeners"],"sourceRoot":""}