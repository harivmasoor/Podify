{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js","webpack://podify/./src/searchBar.js"],"sourcesContent":["\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\nasync function fetchCurrentPlaying() {\n    const endpoint = `https://api.spotify.com/v1/me/player/currently-playing`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            try {\n                const data = JSON.parse(text);\n                updateCurrentPlaying(data);\n            } catch (e) {\n                console.error(\"Failed to parse JSON. Response text:\", text);\n                throw e;\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n        document.getElementById('currentImage').src = track.album.images[0].url;\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","// Description: The main JavaScript file for the Podify web app.\n\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n"],"names":["currentAccessToken","currentSpotifyUri","redirectToSpotify","spotifyURL","split","slice","join","window","open","console","error","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","undefined","i","response","fetch","ok","Error","err","Promise","res","setTimeout","playItem","itemId","itemType","headers","body","uris","context_uri","log","method","JSON","stringify","errorBody","json","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","document","getElementById","children","find","item","dataset","id","src","image","textContent","name","updateSeekBarInterval","accessToken","player","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","data","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","type","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","addEventListener","handleResultClick","e","currentTarget","artistId","topTracksEndpoint","status","tracks","map","track","album","images","url","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","isPlaying","togglePlay","pause","then","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","push","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","text","uri","warn","updateCurrentPlaying","parse","fetchCurrentPlaying","setupWebPlayer","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","play","connect","href","event","preventDefault","initializeEventListeners"],"sourceRoot":""}