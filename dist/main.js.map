{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/searchBar.js","webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js"],"sourcesContent":["let accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';  // Add border\n  } else {\n      searchResults.style.border = 'none';  // Remove border\n  }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);  // Half a second delay to reduce the number of requests\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const results = [];\n    \n    if (data.shows && data.shows.items) {\n      results.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,  // Include the ID\n        name: item.name,\n    })));\n    }\n    \n    if (data.tracks && data.tracks.items) {\n      results.push(...data.tracks.items.map(item => ({\n        type: 'track',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n    if (data.episodes && data.episodes.items) {\n      results.push(...data.episodes.items.map(item => ({\n        type: 'episode',\n        id: item.id,  // Include the ID\n        name: item.name,\n      })));\n    }\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';  // Clear previous results\n\n  results.forEach(result => {\n      const resultElement = document.createElement('div');\n      resultElement.className = 'resultItem';\n      resultElement.dataset.id = result.id;  // Add this line to store the Spotify ID on the element\n      resultElement.dataset.type = result.type;  // And this one to store the type (track or show)\n      resultElement.innerHTML = `<strong>${result.type}:</strong> ${result.name}`;\n      resultsContainer.appendChild(resultElement);\n  });\n}\n\n\n\n","let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        console.log(\"Attempting to play\", body.context_uri);\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n}\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    // You can have custom messages or actions based on specific errors.\n    if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n        });\n    }\n}\n\nfunction rewindTrack() {\n    player.seek(player.getCurrentState().position - 15000);  // rewinds 15 seconds\n}\n\nfunction fastForwardTrack() {\n    player.seek(player.getCurrentState().position + 15000);  // fast forwards 15 seconds\n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["accessToken","currentAccessToken","player","spotifySDKReady","Promise","resolve","window","onSpotifyWebPlaybackSDKReady","isPlaying","togglePlay","pause","then","console","log","document","getElementById","textContent","resume","rewindTrack","seek","getCurrentState","position","fastForwardTrack","addEventListener","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","access_token","token_type","expires_in","fetch","headers","Authorization","response","json","data","username","display_name","catch","error","accessTokenValue","searchInput","searchResults","timer","e","target","value","border","clearTimeout","setTimeout","async","query","searchEndpoint","encodeURIComponent","status","localStorage","getItem","setItem","refreshToken","results","shows","items","push","map","item","type","id","name","tracks","episodes","resultsContainer","innerHTML","forEach","result","resultElement","createElement","className","dataset","appendChild","displayResults","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","itemId","itemType","body","context_uri","method","JSON","stringify","ok","errorBody","Error","statusText","message","includes","alert","handlePlaybackError","playItem","setupWebPlayer","getOAuthToken","callback","addListener","state","paused","_ref","device_id","device_ids","play","connect","href","length","event","preventDefault","initializeEventListeners"],"sourceRoot":""}