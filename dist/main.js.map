{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/audioCapture.js","webpack://podify/webpack/bootstrap","webpack://podify/./src/webPlayer.js","webpack://podify/./src/searchBar.js","webpack://podify/./src/index.js"],"sourcesContent":["\n\nfunction displayTranscription(result) {\n    const transcriptionBox = document.getElementById('transcriptionBox');\n    if (result && result.transcript) {\n        transcriptionBox.value = result.transcript;\n    } else {\n        transcriptionBox.value = \"Failed to get transcription.\";\n    }\n}\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    initializeAudioCapture();\n});\n\nconst socket = new WebSocket('ws://YOUR_BACKEND_URL/transcription');\n\nsocket.onopen = function (event) {\n    console.log(\"WebSocket is open now.\");\n    socket.send(\"Start Listening for transcription\");  // You can send a message to start listening\n};\n\nsocket.onmessage = function (event) {\n    console.log(\"Received data from server:\", event.data);\n    // Here, you can handle the received transcription, e.g., display it in a textarea.\n};\n\nsocket.onclose = function (event) {\n    if (event.wasClean) {\n        console.log(`Closed cleanly, code=${event.code}, reason=${event.reason}`);\n    } else {\n        console.log('Connection died');\n    }\n};\n\nsocket.onerror = function (error) {\n    console.log(`Error: ${error.message}`);\n};\n\n\n\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        const currentImage = document.getElementById('currentImage');\n        currentImage.src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n        currentImage.style.display = 'block';  // Show the image\n    }\n}\nasync function fetchCurrentPlaying(retries = 3) {\n    const endpoint = `https://api.spotify.com/v1/me/player`; \n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    if (retries <= 0) {\n        console.warn(\"Max retries reached. Unable to fetch currently playing track.\");\n        return;\n    }\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            if (text) {\n                try {\n                    const data = JSON.parse(text);\n                    updateCurrentPlaying(data);\n                } catch (e) {\n                    console.error(\"Failed to parse JSON. Response text:\", text);\n                    throw e;\n                }\n            } else {\n                console.warn(\"No track is currently playing or the response is empty. Retrying...\");\n                setTimeout(() => fetchCurrentPlaying(retries - 1), 2000);  // retry after 2 seconds\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n\n        // Set the src. The load event will trigger once the image is loaded.\n        currentImage.src = track.album.images[0].url;\n\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  searchInput.style.display = 'block';\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n","// Description: The main JavaScript file for the Podify web app.\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\nimport { initializeAudioCapture } from './audioCapture.js';\n\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction onSuccessfulLogin() {\n    // Display the current image, Spotify logo, and web player\n    // document.getElementById('currentImage').style.display = 'block';\n    const currentImage = document.getElementById('currentImage');\n    currentImage.addEventListener('load', function() {\n        this.style.display = 'block';\n    });\n    \n    document.getElementById('spotifyLogo').style.display = 'block'; // changed to getElementById\n    document.getElementById('webPlayer').style.display = 'flex';\n    \n    // For elements with class, use querySelector\n    document.querySelector('.playerControls').style.display = 'flex'; \n    document.querySelector('.playerControls button').style.display = 'flex'; \n    \n    document.getElementById('seekBarContainer').style.display = 'flex';\n    document.getElementById('currentTime').style.display = 'block'; // removed '#'\n    document.getElementById('totalTime').style.display = 'block'; // corrected capitalization to match HTML ID\n    \n    // Removed the line for '.player-controls' as it doesn't match any class in the provided HTML.\n    \n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n    initializeAudioCapture();  \n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n        onSuccessfulLogin();\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                // play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Parse the URL's query parameters\n    const params = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = params.get('access_token');\n\n    if (accessToken) {\n        fetchUserProfile(accessToken).then(userProfile => {\n            if (userProfile.product !== 'premium') {\n                alert('Please upgrade to premium to use this app.');\n                window.location.href = 'https://www.spotify.com';\n            } else {\n                // Handle the logic for premium users (like setting up the web player, etc.)\n                setupWebPlayer(accessToken);\n                // Note: Ensure that \"setupWebPlayer\" function exists and is properly defined in your code.\n            }\n        }).catch(error => {\n            console.error(\"Error fetching user profile:\", error);\n            alert('There was an error fetching your Spotify profile.');\n        });\n    }\n});\n\nfunction fetchUserProfile(accessToken) {\n    return new Promise((resolve, reject) => {\n        fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                'Authorization': 'Bearer ' + accessToken\n            }\n        }).then(response => response.json()).then(data => {\n            resolve(data);\n        }).catch(error => {\n            reject(error);\n        });\n    });\n}\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["document","addEventListener","initializeAudioCapture","socket","WebSocket","onopen","event","console","log","send","onmessage","data","onclose","wasClean","code","reason","onerror","error","message","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","currentAccessToken","currentSpotifyUri","setupWebPlayer","accessToken","getElementById","redirectToSpotify","fetchCurrentPlaying","spotifyURL","split","slice","join","window","open","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","i","response","fetch","ok","Error","err","Promise","res","setTimeout","retries","headers","warn","text","item","track","uri","currentImage","src","album","images","url","textContent","name","updateCurrentPlaying","JSON","parse","e","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","json","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","type","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","dataset","id","image","handleResultClick","currentTarget","artistId","topTracksEndpoint","status","tracks","map","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","itemId","itemType","body","uris","context_uri","method","stringify","errorBody","statusText","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","style","display","playItem","updateSeekBarInterval","player","isPlaying","togglePlay","pause","then","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","push","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","this","querySelector","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","connect","reject","fetchUserProfile","userProfile","product","href","preventDefault","initializeEventListeners"],"sourceRoot":""}