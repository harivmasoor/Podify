{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js","webpack://podify/./src/searchBar.js"],"sourcesContent":["\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\nasync function fetchCurrentPlaying(retries = 3) {\n    const endpoint = `https://api.spotify.com/v1/me/player/currently-playing`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    if (retries <= 0) {\n        console.warn(\"Max retries reached. Unable to fetch currently playing track.\");\n        return;\n    }\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            if (text) {\n                try {\n                    const data = JSON.parse(text);\n                    updateCurrentPlaying(data);\n                } catch (e) {\n                    console.error(\"Failed to parse JSON. Response text:\", text);\n                    throw e;\n                }\n            } else {\n                console.warn(\"No track is currently playing or the response is empty. Retrying...\");\n                setTimeout(() => fetchCurrentPlaying(retries - 1), 2000);  // retry after 2 seconds\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n        document.getElementById('currentImage').src = track.album.images[0].url;\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","// Description: The main JavaScript file for the Podify web app.\n\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n"],"names":["currentAccessToken","currentSpotifyUri","setupWebPlayer","accessToken","document","getElementById","addEventListener","e","target","classList","contains","playItem","dataset","id","type","redirectToSpotify","fetchCurrentPlaying","spotifyURL","split","slice","join","window","open","console","error","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","undefined","i","response","fetch","ok","Error","err","Promise","res","setTimeout","itemId","itemType","headers","body","uris","context_uri","log","method","JSON","stringify","errorBody","json","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","item","src","image","textContent","name","retries","warn","text","data","track","uri","album","images","url","updateCurrentPlaying","parse","updateSeekBarInterval","player","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","trackResults","artistResults","showResults","geniusHeader","createElement","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","handleResultClick","currentTarget","artistId","topTracksEndpoint","status","tracks","map","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","isPlaying","togglePlay","pause","then","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","state","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","push","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","play","connect","href","event","preventDefault","initializeEventListeners"],"sourceRoot":""}