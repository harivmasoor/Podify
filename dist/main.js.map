{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/audioCapture.js","webpack://podify/webpack/bootstrap","webpack://podify/./src/webPlayer.js","webpack://podify/./src/searchBar.js","webpack://podify/./src/index.js"],"sourcesContent":["// audioCapture.js\n\nconst captureAudioButton = document.getElementById('captureAudio');\nlet mediaRecorder;\nlet audioChunks = [];\n\nfunction initializeAudioCapture() {\n    captureAudioButton.addEventListener('click', () => {\n        if (typeof mediaRecorder === 'undefined' || mediaRecorder.state === 'inactive') {\n            const constraints = {\n                audio: {\n                    echoCancellation: false,\n                    autoGainControl: false,\n                    noiseSuppression: false,\n                    latency: 0\n                }\n            };\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm;codecs=opus' });\n                    audioChunks = [];\n\n                    mediaRecorder.ondataavailable = event => {\n                        audioChunks.push(event.data);\n                    };\n\n                    mediaRecorder.onstop = () => {\n                        const audioBlob = new Blob(audioChunks, { type: 'audio/webm;codecs=opus' });\n                        const audioUrl = URL.createObjectURL(audioBlob);\n                        const audio = new Audio(audioUrl);\n                        audio.play();\n                        downloadAudio(audioUrl);\n                    };\n\n                    mediaRecorder.start();\n                    captureAudioButton.textContent = \"Stop Recording\";\n                })\n                .catch(err => {\n                    console.error('Error accessing the microphone', err);\n                });\n        } else if (mediaRecorder.state === 'recording') {\n            mediaRecorder.stop();\n            captureAudioButton.textContent = \"Capture Sound\";\n        }\n    });\n}\n\nfunction downloadAudio(url) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'recorded-audio.webm';\n    a.click();\n}\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    initializeAudioCapture();\n});\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n\nlet currentAccessToken = null;\nlet currentSpotifyUri = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n\n    // Adding event listener to the Spotify logo\n    const spotifyLogo = document.getElementById('spotifyLogo');\n    spotifyLogo.addEventListener('click', redirectToSpotify);\n\n    // Fetch and update the current playing song after user logs in\n    fetchCurrentPlaying();\n}\n\nfunction redirectToSpotify() {\n    if (currentSpotifyUri) {\n        const spotifyURL = `https://open.spotify.com/${currentSpotifyUri.split(':').slice(1).join('/')}`;\n        window.open(spotifyURL, '_blank');\n    } else {\n        console.error('No track is currently being played.');\n    }\n}\n\n\nasync function fetchWithRetry(endpoint, options, maxRetries = 3) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            const response = await fetch(endpoint, options);\n            if (response.ok) return response;\n            if (i === maxRetries - 1) throw new Error('Max retries reached');\n        } catch (err) {\n            console.error(`Attempt ${i + 1} failed. Retrying...`);\n            await new Promise(res => setTimeout(res, 2000)); // wait for 2 seconds\n        }\n    }\n}\n\nexport async function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    \n    let body;\n\n    // This part identifies the type of item and prepares the body for the play request.\n    // It also updates the currentSpotifyUri variable with the URI of the current item.\n    if (itemType === 'track' || itemType === 'episode') {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            uris: [currentSpotifyUri],\n        };\n    } else {\n        currentSpotifyUri = `spotify:${itemType}:${itemId}`;\n        body = {\n            context_uri: currentSpotifyUri,\n        };\n    }\n\n    try {\n        console.log(\"Attempting to play\", body);\n        const response = await fetchWithRetry(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    \n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        const currentImage = document.getElementById('currentImage');\n        currentImage.src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n        currentImage.style.display = 'block';  // Show the image\n    }\n}\nasync function fetchCurrentPlaying(retries = 3) {\n    const endpoint = `https://api.spotify.com/v1/me/player`; \n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n\n    if (retries <= 0) {\n        console.warn(\"Max retries reached. Unable to fetch currently playing track.\");\n        return;\n    }\n\n    try {\n        const response = await fetchWithRetry(endpoint, { headers: headers });\n        if (response.ok) {\n            const text = await response.text();\n            if (text) {\n                try {\n                    const data = JSON.parse(text);\n                    updateCurrentPlaying(data);\n                } catch (e) {\n                    console.error(\"Failed to parse JSON. Response text:\", text);\n                    throw e;\n                }\n            } else {\n                console.warn(\"No track is currently playing or the response is empty. Retrying...\");\n                setTimeout(() => fetchCurrentPlaying(retries - 1), 2000);  // retry after 2 seconds\n            }\n        } else {\n            const text = await response.text();\n            console.error(\"Error response:\", text);\n        }\n    } catch (error) {\n        console.error('Error fetching current playing:', error);\n    }\n}\n\n\nfunction updateCurrentPlaying(data) {\n    if (data && data.item) {\n        const track = data.item;\n        currentSpotifyUri = track.uri;\n\n        // Set the src. The load event will trigger once the image is loaded.\n        currentImage.src = track.album.images[0].url;\n\n        document.getElementById('currentTitle').textContent = track.name;\n    } else {\n        console.warn('No track is currently being played.');\n    }\n}\n\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    if (error.message.includes(\"Max retries reached\")) {\n        alert('There seems to be a connection issue with Spotify. Please try again in a few moments.');\n    } else if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { playItem } from './webPlayer.js'; \nlet accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  searchInput.style.display = 'block';\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n    let showResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n    if (data.shows && data.shows.items) {\n      showResults.push(...data.shows.items.map(item => ({\n        type: 'show',\n        id: item.id,\n        name: item.name,\n        image: item.images[0]?.url || '',\n      })));\n    }\n    if (data.artists && data.artists.items) {\n  artistResults.push(...data.artists.items.map(item => ({\n    type: 'artist',\n    id: item.id,\n    name: item.name,\n    image: item.images[0]?.url || '', // Use the first image or an empty string as a fallback\n  })));\n}\n\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...showResults,...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  const episodeResults = results.filter(result => result.type === 'episode');\n  const trackResults = results.filter(result => result.type === 'track');\n  const artistResults = results.filter(result => result.type === 'artist');\n  const showResults = results.filter(result => result.type === 'show');\n\nif (artistResults.length > 0) {\n  const geniusHeader = document.createElement('h2');\n  geniusHeader.textContent = 'Geniuses';\n  resultsContainer.appendChild(geniusHeader);\n\n  artistResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n\nif (showResults.length > 0) {\n  const mogulHeader = document.createElement('h2');\n  mogulHeader.textContent = 'Moguls';\n  resultsContainer.appendChild(mogulHeader);\n\n  showResults.forEach(result => appendResultToContainer(result, resultsContainer));\n}\n  if (episodeResults.length > 0) {\n    const podHeader = document.createElement('h2');\n    podHeader.textContent = 'Pods';\n    resultsContainer.appendChild(podHeader);\n\n    episodeResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n\n  if (trackResults.length > 0) {\n    const bangerHeader = document.createElement('h2');\n    bangerHeader.textContent = 'Bangers';\n    resultsContainer.appendChild(bangerHeader);\n\n    trackResults.forEach(result => appendResultToContainer(result, resultsContainer));\n  }\n}\n\nfunction appendResultToContainer(result, container) {\n  const resultElement = document.createElement('div');\n  resultElement.className = 'resultItem';\n  resultElement.dataset.id = result.id;\n  resultElement.dataset.type = result.type;\n  resultElement.dataset.name = result.name;\n  resultElement.dataset.image = result.image;\n  resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n  resultElement.addEventListener('click', handleResultClick);\n  container.appendChild(resultElement);\n}\n\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  } else if (type === 'track' || type === 'episode') {\n    playItem(id, type);\n  }\n}\n\n\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=10`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n\n","// Description: The main JavaScript file for the Podify web app.\n\nimport { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\nimport { initializeAudioCapture } from './audioCapture.js';\n\n\nlet updateSeekBarInterval;  // Declare the variable at a scope accessible by all your functions\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\nlet currentPosition = 0;  // To track the current position of the track\nlet trackDuration = 0;  // To track the duration of the track\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n            clearInterval(updateSeekBarInterval);  // Stop updating the seek bar\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n            updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Resume updating the seek bar\n        });\n    }\n}\n\n\nfunction rewindTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = Math.max(state.position - 15000, 0); // ensure position is not negative\n            player.seek(newPosition).then(() => {\n                console.log('Rewound 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction fastForwardTrack() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const newPosition = state.position + 15000;\n            player.seek(newPosition).then(() => {\n                console.log('Fast-forwarded 15 seconds!');\n            });\n        }\n    });\n}\n\nfunction onSuccessfulLogin() {\n    // Display the current image, Spotify logo, and web player\n    // document.getElementById('currentImage').style.display = 'block';\n    const currentImage = document.getElementById('currentImage');\n    currentImage.addEventListener('load', function() {\n        this.style.display = 'block';\n    });\n    \n    document.getElementById('spotifyLogo').style.display = 'block'; // changed to getElementById\n    document.getElementById('webPlayer').style.display = 'flex';\n    \n    // For elements with class, use querySelector\n    document.querySelector('.playerControls').style.display = 'flex'; \n    document.querySelector('.playerControls button').style.display = 'flex'; \n    \n    document.getElementById('seekBarContainer').style.display = 'flex';\n    document.getElementById('currentTime').style.display = 'block'; // removed '#'\n    document.getElementById('totalTime').style.display = 'block'; // corrected capitalization to match HTML ID\n    \n    // Removed the line for '.player-controls' as it doesn't match any class in the provided HTML.\n    \n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n    initializeAudioCapture();\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n        onSuccessfulLogin();\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        if (state) {\n            const trackDuration = state.track_window.current_track.duration_ms;\n            const currentPosition = state.position;\n    \n            document.getElementById('seekBar').max = trackDuration;\n            document.getElementById('seekBar').value = currentPosition;\n    \n            // Update the time display\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n            document.getElementById('totalTime').textContent = formatTime(trackDuration);\n        }\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        updateSeekBarInterval = setInterval(updateSeekBar, 1000);  // Update the seek bar every second\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                // play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\ndocument.getElementById('seekBar').addEventListener('input', (e) => {\n    const newPosition = e.target.value; // This will be in milliseconds\n    player.seek(newPosition).then(() => {\n        console.log(`Moved to ${newPosition} ms`);\n    });\n});\n\nfunction formatTime(ms) {\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n}\n\nfunction updateSeekBar() {\n    player.getCurrentState().then(state => {\n        if (state) {\n            const currentPosition = state.position;\n            document.getElementById('seekBar').value = currentPosition;\n            document.getElementById('currentTime').textContent = formatTime(currentPosition);\n        }\n    });\n}\n\ndocument.getElementById('currentTime').textContent = formatTime(currentPosition);\ndocument.getElementById('totalTime').textContent = formatTime(trackDuration);\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Parse the URL's query parameters\n    const params = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = params.get('access_token');\n\n    if (accessToken) {\n        fetchUserProfile(accessToken).then(userProfile => {\n            if (userProfile.product !== 'premium') {\n                alert('Please upgrade to premium to use this app.');\n                window.location.href = 'https://www.spotify.com';\n            } else {\n                // Handle the logic for premium users (like setting up the web player, etc.)\n                setupWebPlayer(accessToken);\n                // Note: Ensure that \"setupWebPlayer\" function exists and is properly defined in your code.\n            }\n        }).catch(error => {\n            console.error(\"Error fetching user profile:\", error);\n            alert('There was an error fetching your Spotify profile.');\n        });\n    }\n});\n\nfunction fetchUserProfile(accessToken) {\n    return new Promise((resolve, reject) => {\n        fetch('https://api.spotify.com/v1/me', {\n            headers: {\n                'Authorization': 'Bearer ' + accessToken\n            }\n        }).then(response => response.json()).then(data => {\n            resolve(data);\n        }).catch(error => {\n            reject(error);\n        });\n    });\n}\n\n\n\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["captureAudioButton","document","getElementById","mediaRecorder","audioChunks","addEventListener","state","constraints","audio","echoCancellation","autoGainControl","noiseSuppression","latency","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","mimeType","ondataavailable","event","push","data","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","Audio","play","url","a","createElement","href","download","click","downloadAudio","start","textContent","catch","err","console","error","stop","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","currentAccessToken","currentSpotifyUri","setupWebPlayer","accessToken","redirectToSpotify","fetchCurrentPlaying","spotifyURL","split","slice","join","window","open","async","fetchWithRetry","endpoint","options","maxRetries","arguments","length","i","response","fetch","ok","Error","Promise","res","setTimeout","retries","headers","warn","text","item","track","uri","currentImage","src","album","images","name","updateCurrentPlaying","JSON","parse","e","spotifySDKReady","resolve","onSpotifyWebPlaybackSDKReady","refreshToken","localStorage","getItem","json","access_token","setItem","displayResults","results","resultsContainer","innerHTML","episodeResults","filter","result","trackResults","artistResults","showResults","geniusHeader","appendChild","forEach","appendResultToContainer","mogulHeader","podHeader","bangerHeader","container","resultElement","className","dataset","id","image","handleResultClick","currentTarget","artistId","topTracksEndpoint","status","tracks","map","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","itemId","itemType","body","uris","context_uri","log","method","stringify","errorBody","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","style","display","playItem","updateSeekBarInterval","player","isPlaying","togglePlay","pause","clearInterval","resume","setInterval","updateSeekBar","rewindTrack","getCurrentState","newPosition","Math","max","position","seek","fastForwardTrack","formatTime","ms","totalSeconds","floor","seconds","currentPosition","value","hash","location","substring","hashParams","URLSearchParams","has","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","accessTokenValue","searchInput","searchResults","timer","target","border","clearTimeout","query","searchEndpoint","encodeURIComponent","popularity","artists","episodes","shows","sort","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","this","querySelector","getOAuthToken","callback","addListener","trackDuration","track_window","current_track","duration_ms","paused","_ref","device_id","device_ids","connect","reject","fetchUserProfile","userProfile","product","preventDefault","initializeAudioCapture","initializeEventListeners"],"sourceRoot":""}