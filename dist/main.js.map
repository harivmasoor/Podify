{"version":3,"file":"main.js","mappings":"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","sources":["webpack://podify/./src/searchBar.js","webpack://podify/./src/webPlayer.js","webpack://podify/./src/index.js"],"sourcesContent":["let accessToken = null;\n\nexport function setupSearch(accessTokenValue) {\n  accessToken = accessTokenValue;\n\n  const searchInput = document.getElementById('searchInput');\n  const searchResults = document.getElementById('searchResults');\n  let timer;\n\n  searchInput.addEventListener('input', (e) => {\n    if (e.target.value) {\n      searchResults.style.border = '1px solid #ccc';\n    } else {\n      searchResults.style.border = 'none';\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      searchSpotify(e.target.value);\n    }, 500);\n  });\n}\n\nasync function refreshToken() {\n  try {\n    const response = await fetch(`https://podify-backend.onrender.com/refresh_token?refresh_token=${localStorage.getItem('refresh_token')}`);\n    const data = await response.json();\n    accessToken = data.access_token;\n    localStorage.setItem('access_token', accessToken);\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n  }\n}\n\nasync function searchSpotify(query) {\n  const searchEndpoint = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=artist,show,episode,track&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(searchEndpoint, { headers: headers });\n    \n    // If token expired (status 401), refresh and retry\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(searchEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    \n    let trackResults = [];\n    let artistResults = [];\n    let episodeResults = [];\n\n    // Extract and structure data for tracks\n    if (data.tracks && data.tracks.items) {\n      trackResults = data.tracks.items.map(item => ({\n          type: 'track',\n          id: item.id,\n          name: item.name,\n          image: item.album.images[0].url,\n          popularity: item.popularity\n      }));\n    }\n\n    // Extract and structure data for artists\n    if (data.artists && data.artists.items) {\n      artistResults = data.artists.items.map(item => ({\n          type: 'artist',\n          id: item.id,\n          name: item.name,\n          image: item.images[0] ? item.images[0].url : null,\n          popularity: item.popularity\n      }));\n    }\n    \n    if (data.episodes && data.episodes.items) {\n      episodeResults = data.episodes.items.map(item => ({\n          type: 'episode',\n          id: item.id,\n          name: item.name,\n          image: item.images[0].url\n      }));\n    }\n\n    // Sort tracks and artists by popularity\n    trackResults.sort((a, b) => b.popularity - a.popularity);\n    artistResults.sort((a, b) => b.popularity - a.popularity);\n\n    // Combine the results in desired order\n    const results = [...trackResults, ...artistResults, ...episodeResults];\n\n    // Call the displayResults function with the search results\n    displayResults(results);\n    \n    return results;\n  } catch (error) {\n    console.error('Error searching Spotify:', error);\n    return [];\n  }\n}\n\n\nfunction displayResults(results) {\n  const resultsContainer = document.getElementById('searchResults');\n  resultsContainer.innerHTML = '';\n\n  results.forEach(result => {\n    const resultElement = document.createElement('div');\n    resultElement.className = 'resultItem';\n    resultElement.dataset.id = result.id;\n    resultElement.dataset.type = result.type;\n    resultElement.dataset.name = result.name;\n    resultElement.dataset.image = result.image;\n    resultElement.innerHTML = `<img src=\"${result.image}\" alt=\"${result.name}\"/> ${result.name}`;\n    resultElement.addEventListener('click', handleResultClick);\n    resultsContainer.appendChild(resultElement);\n  });\n}\n\nasync function handleResultClick(e) {\n  const type = e.currentTarget.dataset.type;\n  const id = e.currentTarget.dataset.id;\n\n  if (type === 'artist') {\n    await getArtistTopTracks(id);\n  } else if (type === 'show') {\n    await getShowEpisodes(id);\n  }\n}\n\nasync function getArtistTopTracks(artistId) {\n  const topTracksEndpoint = `https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(topTracksEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(topTracksEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const topTracks = data.tracks.map(track => ({\n      type: 'track',\n      id: track.id,\n      name: track.name,\n      image: track.album.images[0].url,\n    }));\n\n    displayResults(topTracks);\n\n  } catch (error) {\n    console.error('Error getting artist top tracks:', error);\n  }\n}\n\nasync function getShowEpisodes(showId) {\n  const episodesEndpoint = `https://api.spotify.com/v1/shows/${showId}/episodes?market=US&limit=5`;\n  const headers = {\n    'Authorization': `Bearer ${accessToken}`,\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    let response = await fetch(episodesEndpoint, { headers: headers });\n\n    if (response.status === 401) {\n      await refreshToken();\n      response = await fetch(episodesEndpoint, { headers: headers });\n    }\n\n    const data = await response.json();\n    const episodes = data.items.map(episode => ({\n      type: 'episode',\n      id: episode.id,\n      name: episode.name,\n      image: episode.images[0].url,\n    }));\n\n    displayResults(episodes);\n\n  } catch (error) {\n    console.error('Error getting show episodes:', error);\n  }\n}\n\n\n","let currentAccessToken = null;\n\nexport function setupWebPlayer(accessToken) {\n    currentAccessToken = accessToken;\n\n    const searchResults = document.getElementById('searchResults');\n    searchResults.addEventListener('click', (e) => {\n        if (e.target.classList.contains('resultItem')) {\n            playItem(e.target.dataset.id, e.target.dataset.type);\n        }\n    });\n}\n\nasync function playItem(itemId, itemType) {\n    const endpoint = `https://api.spotify.com/v1/me/player/play`;\n    const headers = {\n        'Authorization': `Bearer ${currentAccessToken}`,\n        'Content-Type': 'application/json',\n    };\n    const body = {\n        context_uri: `spotify:${itemType}:${itemId}`,\n    };\n\n    try {\n        console.log(\"Attempting to play\", body.context_uri);\n        const response = await fetch(endpoint, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify(body),\n        });\n\n        if (!response.ok) {\n            const errorBody = await response.json();\n            console.error(\"Play response:\", errorBody);\n            throw new Error(`Unable to play ${itemType}: ${response.statusText}`);\n        }\n\n        console.log(`Successfully started playing ${itemType} with ID: ${itemId}`);\n    } catch (error) {\n        console.error('Error in web player:', error);\n        handlePlaybackError(error);\n    }\n    const selectedItem = Array.from(document.getElementById('searchResults').children).find(item => item.dataset.id === itemId);\n    if (selectedItem) {\n        document.getElementById('currentImage').src = selectedItem.dataset.image;\n        document.getElementById('currentTitle').textContent = selectedItem.dataset.name;\n    }\n}\n\n\nlet spotifySDKReady = new Promise((resolve) => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n        resolve();\n    };\n});\n\nexport async function checkWebPlaybackSDKCompatibility() {\n    await spotifySDKReady;  // wait for the SDK to be ready\n    return window.Spotify?.Player?.isSupported() ?? false;\n}\n\nfunction handlePlaybackError(error) {\n    console.error('Web Playback SDK error:', error);\n    // You can have custom messages or actions based on specific errors.\n    if(error.message.includes(\"Playback cannot be started from this context\")) {\n        alert('Cannot play this item. Please choose another.');\n    } else {\n        alert('Playback error. Please try again later.');\n    }\n}\n","import { setupSearch } from './searchBar.js';\nimport { setupWebPlayer, checkWebPlaybackSDKCompatibility } from './webPlayer.js';\n\nlet accessToken; // Move the declaration of accessToken to a higher scope\nlet player;  // Declare the player variable at a scope accessible by all your functions\nlet isPlaying = false;  // To track playback state\n\n// Function to get user's Spotify profile\nfunction getUserProfile(token) {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n\n    fetch('https://api.spotify.com/v1/me', { headers: headers })\n        .then(response => response.json())\n        .then(data => {\n            const username = data.display_name;\n            renderUsername(username);\n        })\n        .catch(error => {\n            console.error('Error fetching user profile:', error);\n        });\n}\n\n// Function to render the user's name\nfunction renderUsername(username) {\n    const usernameElement = document.getElementById('username');\n    usernameElement.textContent = username;\n}\n\n// Playback control functions\nfunction togglePlay() {\n    if (isPlaying) {\n        player.pause().then(() => {\n            console.log('Paused Playback');\n            isPlaying = false;\n            document.getElementById('playPause').textContent = '▶️';\n        });\n    } else {\n        player.resume().then(() => {\n            console.log('Resumed Playback');\n            isPlaying = true;\n            document.getElementById('playPause').textContent = '⏸️';\n        });\n    }\n}\n\nfunction rewindTrack() {\n    player.seek(player.getCurrentState().position - 15000);  // rewinds 15 seconds\n}\n\nfunction fastForwardTrack() {\n    player.seek(player.getCurrentState().position + 15000);  // fast forwards 15 seconds\n}\n\n// Initialize all event listeners\nfunction initializeEventListeners() {\n    // Login button event\n    const loginButton = document.getElementById('loginButton');\n    loginButton.addEventListener('click', () => {\n        window.location.href = 'https://podify-backend.onrender.com/login';\n    });\n\n    // Search input events\n    const searchInput = document.getElementById('searchInput');\n    const searchResults = document.getElementById('searchResults');\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length > 0) {\n            searchResults.style.display = 'block';\n        } else {\n            searchResults.style.display = 'none';\n        }\n    });\n\n    searchInput.addEventListener('focus', (event) => {\n        event.preventDefault();\n    });\n\n    // Player control events\n    document.getElementById('playPause').addEventListener('click', togglePlay);\n    document.getElementById('rewind').addEventListener('click', rewindTrack);\n    document.getElementById('fastForward').addEventListener('click', fastForwardTrack);\n}\n\n// The main code that runs when the window loads\nwindow.addEventListener('load', () => {\n    const hash = window.location.hash.substring(1);\n    const hashParams = new URLSearchParams(hash);\n\n    if (hashParams.has('access_token')) {\n        document.getElementById('loginButton').style.display = 'none';  // Hide the login button\n\n        accessToken = hashParams.get('access_token'); \n        const tokenType = hashParams.get('token_type');\n        const expiresIn = hashParams.get('expires_in');\n        const searchContainer = document.getElementById('search-container');\n        searchContainer.style.display = 'block';\n\n        console.log({\n            access_token: accessToken,\n            token_type: tokenType,\n            expires_in: expiresIn,\n        });\n\n        getUserProfile(accessToken);\n        setupSearch(accessToken);\n        if (checkWebPlaybackSDKCompatibility()) {\n            setupWebPlayer(accessToken);\n        } else {\n            alert(\"Device not suitable for playback\");\n        }\n    }\n});\n\nwindow.onSpotifyWebPlaybackSDKReady = () => {\n    player = new Spotify.Player({\n        name: 'Your Web Player Name',\n        getOAuthToken: callback => {\n            callback(accessToken);\n        }\n    });\n\n    player.addListener('player_state_changed', state => {\n        console.log(state);\n        isPlaying = !state.paused;\n        if (isPlaying) {\n            document.getElementById('playPause').textContent = '⏸️';\n        } else {\n            document.getElementById('playPause').textContent = '▶️';\n        }\n    });\n\n    player.addListener('ready', ({ device_id }) => {\n        console.log('Ready with Device ID', device_id);\n\n        // Set the device_id as the active playback device immediately.\n        const headers = {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n        };\n\n        fetch('https://api.spotify.com/v1/me/player', {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({\n                device_ids: [device_id],\n                play: true\n            }),\n        }).then(response => {\n            if (!response.ok) {\n                console.error('Error setting active device:', response.statusText);\n            }\n        });\n    });\n  \n    player.connect();\n};\n\ndocument.getElementById('webPlayer').style.display = 'block';\n\n// Initialize the event listeners\ninitializeEventListeners();\n\n\n\n"],"names":["accessToken","async","refreshToken","response","fetch","localStorage","getItem","data","json","access_token","setItem","error","console","displayResults","results","resultsContainer","document","getElementById","innerHTML","forEach","result","resultElement","createElement","className","dataset","id","type","name","image","addEventListener","handleResultClick","appendChild","e","currentTarget","artistId","topTracksEndpoint","headers","status","tracks","map","track","album","images","url","getArtistTopTracks","showId","episodesEndpoint","items","episode","getShowEpisodes","currentAccessToken","player","spotifySDKReady","Promise","resolve","window","onSpotifyWebPlaybackSDKReady","isPlaying","togglePlay","pause","then","log","textContent","resume","rewindTrack","seek","getCurrentState","position","fastForwardTrack","hash","location","substring","hashParams","URLSearchParams","has","style","display","get","tokenType","expiresIn","token_type","expires_in","Authorization","username","display_name","catch","accessTokenValue","searchInput","searchResults","timer","target","value","border","clearTimeout","setTimeout","query","searchEndpoint","encodeURIComponent","trackResults","artistResults","episodeResults","item","popularity","artists","episodes","sort","a","b","searchSpotify","setupSearch","Spotify","Player","isSupported","checkWebPlaybackSDKCompatibility","classList","contains","itemId","itemType","body","context_uri","method","JSON","stringify","ok","errorBody","Error","statusText","message","includes","alert","handlePlaybackError","selectedItem","Array","from","children","find","src","playItem","setupWebPlayer","getOAuthToken","callback","addListener","state","paused","_ref","device_id","device_ids","play","connect","href","length","event","preventDefault","initializeEventListeners"],"sourceRoot":""}